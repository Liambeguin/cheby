-- Do not edit; this file was generated by Cheby using these options:
--  --gen-hdl -i map_arrays.cheby

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity arraysTests is
  port (
    aclk                 : in    std_logic;
    areset_n             : in    std_logic;
    awvalid              : in    std_logic;
    awready              : out   std_logic;
    awaddr               : in    std_logic_vector(8 downto 2);
    awprot               : in    std_logic_vector(2 downto 0);
    wvalid               : in    std_logic;
    wready               : out   std_logic;
    wdata                : in    std_logic_vector(31 downto 0);
    wstrb                : in    std_logic_vector(3 downto 0);
    bvalid               : out   std_logic;
    bready               : in    std_logic;
    bresp                : out   std_logic_vector(1 downto 0);
    arvalid              : in    std_logic;
    arready              : out   std_logic;
    araddr               : in    std_logic_vector(8 downto 2);
    arprot               : in    std_logic_vector(2 downto 0);
    rvalid               : out   std_logic;
    rready               : in    std_logic;
    rdata                : out   std_logic_vector(31 downto 0);
    rresp                : out   std_logic_vector(1 downto 0);
    repeatBlock_regsBlock_0_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_0_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_0_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_1_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_1_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_1_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_2_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_2_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_2_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_3_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_3_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_3_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_4_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_4_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_4_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_5_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_5_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_5_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_6_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_6_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_6_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_7_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_7_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_7_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_8_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_8_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_8_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_9_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_9_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_9_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_10_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_10_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_10_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_11_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_11_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_11_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_12_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_12_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_12_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_13_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_13_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_13_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_14_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_14_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_14_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_15_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_15_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_15_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_16_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_16_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_16_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_17_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_17_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_17_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_18_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_18_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_18_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_19_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_19_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_19_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_20_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_20_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_20_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_21_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_21_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_21_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_22_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_22_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_22_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_23_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_23_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_23_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_24_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_24_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_24_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_25_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_25_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_25_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_26_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_26_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_26_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_27_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_27_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_27_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_28_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_28_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_28_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_29_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_29_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_29_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_30_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_30_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_30_reg3_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_31_reg1_o : out   std_logic_vector(15 downto 0);
    repeatBlock_regsBlock_31_reg2_o : out   std_logic_vector(31 downto 0);
    repeatBlock_regsBlock_31_reg3_o : out   std_logic_vector(15 downto 0)
  );
end arraysTests;

architecture syn of arraysTests is
  signal rd_req                         : std_logic;
  signal wr_req                         : std_logic;
  signal rd_ack_int                     : std_logic;
  signal wr_ack_int                     : std_logic;
  signal dato                           : std_logic_vector(31 downto 0);
  signal axi_wip                        : std_logic;
  signal axi_wdone                      : std_logic;
  signal axi_rip                        : std_logic;
  signal axi_rdone                      : std_logic;
  signal repeatBlock_regsBlock_0_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_0_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_0_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_0_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_0_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_0_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_0_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_0_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_0_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_1_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_1_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_1_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_1_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_1_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_1_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_1_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_1_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_1_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_2_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_2_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_2_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_2_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_2_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_2_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_2_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_2_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_2_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_3_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_3_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_3_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_3_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_3_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_3_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_3_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_3_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_3_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_4_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_4_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_4_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_4_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_4_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_4_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_4_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_4_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_4_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_5_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_5_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_5_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_5_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_5_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_5_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_5_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_5_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_5_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_6_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_6_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_6_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_6_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_6_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_6_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_6_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_6_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_6_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_7_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_7_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_7_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_7_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_7_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_7_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_7_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_7_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_7_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_8_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_8_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_8_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_8_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_8_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_8_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_8_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_8_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_8_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_9_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_9_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_9_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_9_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_9_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_9_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_9_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_9_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_9_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_10_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_10_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_10_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_10_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_10_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_10_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_10_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_10_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_10_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_11_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_11_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_11_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_11_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_11_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_11_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_11_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_11_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_11_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_12_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_12_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_12_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_12_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_12_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_12_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_12_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_12_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_12_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_13_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_13_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_13_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_13_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_13_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_13_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_13_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_13_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_13_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_14_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_14_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_14_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_14_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_14_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_14_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_14_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_14_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_14_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_15_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_15_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_15_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_15_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_15_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_15_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_15_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_15_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_15_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_16_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_16_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_16_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_16_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_16_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_16_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_16_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_16_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_16_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_17_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_17_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_17_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_17_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_17_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_17_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_17_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_17_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_17_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_18_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_18_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_18_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_18_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_18_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_18_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_18_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_18_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_18_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_19_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_19_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_19_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_19_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_19_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_19_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_19_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_19_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_19_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_20_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_20_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_20_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_20_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_20_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_20_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_20_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_20_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_20_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_21_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_21_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_21_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_21_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_21_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_21_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_21_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_21_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_21_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_22_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_22_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_22_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_22_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_22_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_22_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_22_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_22_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_22_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_23_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_23_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_23_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_23_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_23_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_23_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_23_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_23_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_23_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_24_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_24_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_24_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_24_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_24_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_24_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_24_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_24_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_24_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_25_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_25_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_25_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_25_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_25_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_25_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_25_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_25_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_25_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_26_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_26_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_26_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_26_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_26_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_26_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_26_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_26_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_26_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_27_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_27_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_27_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_27_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_27_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_27_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_27_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_27_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_27_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_28_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_28_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_28_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_28_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_28_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_28_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_28_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_28_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_28_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_29_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_29_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_29_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_29_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_29_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_29_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_29_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_29_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_29_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_30_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_30_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_30_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_30_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_30_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_30_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_30_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_30_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_30_reg3_wack : std_logic;
  signal repeatBlock_regsBlock_31_reg1_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_31_reg1_wreq : std_logic;
  signal repeatBlock_regsBlock_31_reg1_wack : std_logic;
  signal repeatBlock_regsBlock_31_reg2_reg : std_logic_vector(31 downto 0);
  signal repeatBlock_regsBlock_31_reg2_wreq : std_logic;
  signal repeatBlock_regsBlock_31_reg2_wack : std_logic;
  signal repeatBlock_regsBlock_31_reg3_reg : std_logic_vector(15 downto 0);
  signal repeatBlock_regsBlock_31_reg3_wreq : std_logic;
  signal repeatBlock_regsBlock_31_reg3_wack : std_logic;
  signal rd_ack_d0                      : std_logic;
  signal rd_dat_d0                      : std_logic_vector(31 downto 0);
  signal wr_req_d0                      : std_logic;
  signal wr_adr_d0                      : std_logic_vector(8 downto 2);
  signal wr_dat_d0                      : std_logic_vector(31 downto 0);
begin

  -- AW, W and B channels
  wr_req <= (awvalid and wvalid) and not axi_wip;
  awready <= axi_wdone;
  wready <= axi_wip and wr_ack_int;
  bvalid <= axi_wdone;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        axi_wip <= '0';
        axi_wdone <= '0';
      else
        axi_wip <= (awvalid and wvalid) and not axi_wdone;
        axi_wdone <= wr_ack_int or (axi_wdone and not bready);
      end if;
    end if;
  end process;
  bresp <= "00";

  -- AR and R channels
  rd_req <= arvalid and not axi_rip;
  arready <= axi_rdone;
  rvalid <= axi_rdone;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        axi_rip <= '0';
        axi_rdone <= '0';
        rdata <= (others => '0');
      else
        axi_rip <= arvalid and not axi_rdone;
        if rd_ack_int = '1' then
          rdata <= dato;
        end if;
        axi_rdone <= rd_ack_int or (axi_rdone and not rready);
      end if;
    end if;
  end process;
  rresp <= "00";

  -- pipelining for wr-in+rd-out
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        rd_ack_int <= '0';
        wr_req_d0 <= '0';
      else
        rd_ack_int <= rd_ack_d0;
        dato <= rd_dat_d0;
        wr_req_d0 <= wr_req;
        wr_adr_d0 <= awaddr;
        wr_dat_d0 <= wdata;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_0_reg1
  repeatBlock_regsBlock_0_reg1_o <= repeatBlock_regsBlock_0_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_0_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_0_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_0_reg1_wreq = '1' then
          repeatBlock_regsBlock_0_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_0_reg1_wack <= repeatBlock_regsBlock_0_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_0_reg2
  repeatBlock_regsBlock_0_reg2_o <= repeatBlock_regsBlock_0_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_0_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_0_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_0_reg2_wreq = '1' then
          repeatBlock_regsBlock_0_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_0_reg2_wack <= repeatBlock_regsBlock_0_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_0_reg3
  repeatBlock_regsBlock_0_reg3_o <= repeatBlock_regsBlock_0_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_0_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_0_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_0_reg3_wreq = '1' then
          repeatBlock_regsBlock_0_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_0_reg3_wack <= repeatBlock_regsBlock_0_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_1_reg1
  repeatBlock_regsBlock_1_reg1_o <= repeatBlock_regsBlock_1_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_1_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_1_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_1_reg1_wreq = '1' then
          repeatBlock_regsBlock_1_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_1_reg1_wack <= repeatBlock_regsBlock_1_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_1_reg2
  repeatBlock_regsBlock_1_reg2_o <= repeatBlock_regsBlock_1_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_1_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_1_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_1_reg2_wreq = '1' then
          repeatBlock_regsBlock_1_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_1_reg2_wack <= repeatBlock_regsBlock_1_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_1_reg3
  repeatBlock_regsBlock_1_reg3_o <= repeatBlock_regsBlock_1_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_1_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_1_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_1_reg3_wreq = '1' then
          repeatBlock_regsBlock_1_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_1_reg3_wack <= repeatBlock_regsBlock_1_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_2_reg1
  repeatBlock_regsBlock_2_reg1_o <= repeatBlock_regsBlock_2_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_2_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_2_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_2_reg1_wreq = '1' then
          repeatBlock_regsBlock_2_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_2_reg1_wack <= repeatBlock_regsBlock_2_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_2_reg2
  repeatBlock_regsBlock_2_reg2_o <= repeatBlock_regsBlock_2_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_2_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_2_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_2_reg2_wreq = '1' then
          repeatBlock_regsBlock_2_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_2_reg2_wack <= repeatBlock_regsBlock_2_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_2_reg3
  repeatBlock_regsBlock_2_reg3_o <= repeatBlock_regsBlock_2_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_2_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_2_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_2_reg3_wreq = '1' then
          repeatBlock_regsBlock_2_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_2_reg3_wack <= repeatBlock_regsBlock_2_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_3_reg1
  repeatBlock_regsBlock_3_reg1_o <= repeatBlock_regsBlock_3_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_3_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_3_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_3_reg1_wreq = '1' then
          repeatBlock_regsBlock_3_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_3_reg1_wack <= repeatBlock_regsBlock_3_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_3_reg2
  repeatBlock_regsBlock_3_reg2_o <= repeatBlock_regsBlock_3_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_3_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_3_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_3_reg2_wreq = '1' then
          repeatBlock_regsBlock_3_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_3_reg2_wack <= repeatBlock_regsBlock_3_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_3_reg3
  repeatBlock_regsBlock_3_reg3_o <= repeatBlock_regsBlock_3_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_3_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_3_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_3_reg3_wreq = '1' then
          repeatBlock_regsBlock_3_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_3_reg3_wack <= repeatBlock_regsBlock_3_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_4_reg1
  repeatBlock_regsBlock_4_reg1_o <= repeatBlock_regsBlock_4_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_4_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_4_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_4_reg1_wreq = '1' then
          repeatBlock_regsBlock_4_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_4_reg1_wack <= repeatBlock_regsBlock_4_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_4_reg2
  repeatBlock_regsBlock_4_reg2_o <= repeatBlock_regsBlock_4_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_4_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_4_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_4_reg2_wreq = '1' then
          repeatBlock_regsBlock_4_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_4_reg2_wack <= repeatBlock_regsBlock_4_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_4_reg3
  repeatBlock_regsBlock_4_reg3_o <= repeatBlock_regsBlock_4_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_4_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_4_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_4_reg3_wreq = '1' then
          repeatBlock_regsBlock_4_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_4_reg3_wack <= repeatBlock_regsBlock_4_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_5_reg1
  repeatBlock_regsBlock_5_reg1_o <= repeatBlock_regsBlock_5_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_5_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_5_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_5_reg1_wreq = '1' then
          repeatBlock_regsBlock_5_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_5_reg1_wack <= repeatBlock_regsBlock_5_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_5_reg2
  repeatBlock_regsBlock_5_reg2_o <= repeatBlock_regsBlock_5_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_5_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_5_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_5_reg2_wreq = '1' then
          repeatBlock_regsBlock_5_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_5_reg2_wack <= repeatBlock_regsBlock_5_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_5_reg3
  repeatBlock_regsBlock_5_reg3_o <= repeatBlock_regsBlock_5_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_5_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_5_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_5_reg3_wreq = '1' then
          repeatBlock_regsBlock_5_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_5_reg3_wack <= repeatBlock_regsBlock_5_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_6_reg1
  repeatBlock_regsBlock_6_reg1_o <= repeatBlock_regsBlock_6_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_6_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_6_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_6_reg1_wreq = '1' then
          repeatBlock_regsBlock_6_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_6_reg1_wack <= repeatBlock_regsBlock_6_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_6_reg2
  repeatBlock_regsBlock_6_reg2_o <= repeatBlock_regsBlock_6_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_6_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_6_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_6_reg2_wreq = '1' then
          repeatBlock_regsBlock_6_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_6_reg2_wack <= repeatBlock_regsBlock_6_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_6_reg3
  repeatBlock_regsBlock_6_reg3_o <= repeatBlock_regsBlock_6_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_6_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_6_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_6_reg3_wreq = '1' then
          repeatBlock_regsBlock_6_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_6_reg3_wack <= repeatBlock_regsBlock_6_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_7_reg1
  repeatBlock_regsBlock_7_reg1_o <= repeatBlock_regsBlock_7_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_7_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_7_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_7_reg1_wreq = '1' then
          repeatBlock_regsBlock_7_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_7_reg1_wack <= repeatBlock_regsBlock_7_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_7_reg2
  repeatBlock_regsBlock_7_reg2_o <= repeatBlock_regsBlock_7_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_7_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_7_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_7_reg2_wreq = '1' then
          repeatBlock_regsBlock_7_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_7_reg2_wack <= repeatBlock_regsBlock_7_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_7_reg3
  repeatBlock_regsBlock_7_reg3_o <= repeatBlock_regsBlock_7_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_7_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_7_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_7_reg3_wreq = '1' then
          repeatBlock_regsBlock_7_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_7_reg3_wack <= repeatBlock_regsBlock_7_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_8_reg1
  repeatBlock_regsBlock_8_reg1_o <= repeatBlock_regsBlock_8_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_8_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_8_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_8_reg1_wreq = '1' then
          repeatBlock_regsBlock_8_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_8_reg1_wack <= repeatBlock_regsBlock_8_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_8_reg2
  repeatBlock_regsBlock_8_reg2_o <= repeatBlock_regsBlock_8_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_8_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_8_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_8_reg2_wreq = '1' then
          repeatBlock_regsBlock_8_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_8_reg2_wack <= repeatBlock_regsBlock_8_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_8_reg3
  repeatBlock_regsBlock_8_reg3_o <= repeatBlock_regsBlock_8_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_8_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_8_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_8_reg3_wreq = '1' then
          repeatBlock_regsBlock_8_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_8_reg3_wack <= repeatBlock_regsBlock_8_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_9_reg1
  repeatBlock_regsBlock_9_reg1_o <= repeatBlock_regsBlock_9_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_9_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_9_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_9_reg1_wreq = '1' then
          repeatBlock_regsBlock_9_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_9_reg1_wack <= repeatBlock_regsBlock_9_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_9_reg2
  repeatBlock_regsBlock_9_reg2_o <= repeatBlock_regsBlock_9_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_9_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_9_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_9_reg2_wreq = '1' then
          repeatBlock_regsBlock_9_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_9_reg2_wack <= repeatBlock_regsBlock_9_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_9_reg3
  repeatBlock_regsBlock_9_reg3_o <= repeatBlock_regsBlock_9_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_9_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_9_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_9_reg3_wreq = '1' then
          repeatBlock_regsBlock_9_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_9_reg3_wack <= repeatBlock_regsBlock_9_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_10_reg1
  repeatBlock_regsBlock_10_reg1_o <= repeatBlock_regsBlock_10_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_10_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_10_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_10_reg1_wreq = '1' then
          repeatBlock_regsBlock_10_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_10_reg1_wack <= repeatBlock_regsBlock_10_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_10_reg2
  repeatBlock_regsBlock_10_reg2_o <= repeatBlock_regsBlock_10_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_10_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_10_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_10_reg2_wreq = '1' then
          repeatBlock_regsBlock_10_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_10_reg2_wack <= repeatBlock_regsBlock_10_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_10_reg3
  repeatBlock_regsBlock_10_reg3_o <= repeatBlock_regsBlock_10_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_10_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_10_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_10_reg3_wreq = '1' then
          repeatBlock_regsBlock_10_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_10_reg3_wack <= repeatBlock_regsBlock_10_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_11_reg1
  repeatBlock_regsBlock_11_reg1_o <= repeatBlock_regsBlock_11_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_11_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_11_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_11_reg1_wreq = '1' then
          repeatBlock_regsBlock_11_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_11_reg1_wack <= repeatBlock_regsBlock_11_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_11_reg2
  repeatBlock_regsBlock_11_reg2_o <= repeatBlock_regsBlock_11_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_11_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_11_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_11_reg2_wreq = '1' then
          repeatBlock_regsBlock_11_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_11_reg2_wack <= repeatBlock_regsBlock_11_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_11_reg3
  repeatBlock_regsBlock_11_reg3_o <= repeatBlock_regsBlock_11_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_11_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_11_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_11_reg3_wreq = '1' then
          repeatBlock_regsBlock_11_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_11_reg3_wack <= repeatBlock_regsBlock_11_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_12_reg1
  repeatBlock_regsBlock_12_reg1_o <= repeatBlock_regsBlock_12_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_12_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_12_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_12_reg1_wreq = '1' then
          repeatBlock_regsBlock_12_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_12_reg1_wack <= repeatBlock_regsBlock_12_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_12_reg2
  repeatBlock_regsBlock_12_reg2_o <= repeatBlock_regsBlock_12_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_12_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_12_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_12_reg2_wreq = '1' then
          repeatBlock_regsBlock_12_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_12_reg2_wack <= repeatBlock_regsBlock_12_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_12_reg3
  repeatBlock_regsBlock_12_reg3_o <= repeatBlock_regsBlock_12_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_12_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_12_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_12_reg3_wreq = '1' then
          repeatBlock_regsBlock_12_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_12_reg3_wack <= repeatBlock_regsBlock_12_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_13_reg1
  repeatBlock_regsBlock_13_reg1_o <= repeatBlock_regsBlock_13_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_13_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_13_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_13_reg1_wreq = '1' then
          repeatBlock_regsBlock_13_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_13_reg1_wack <= repeatBlock_regsBlock_13_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_13_reg2
  repeatBlock_regsBlock_13_reg2_o <= repeatBlock_regsBlock_13_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_13_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_13_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_13_reg2_wreq = '1' then
          repeatBlock_regsBlock_13_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_13_reg2_wack <= repeatBlock_regsBlock_13_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_13_reg3
  repeatBlock_regsBlock_13_reg3_o <= repeatBlock_regsBlock_13_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_13_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_13_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_13_reg3_wreq = '1' then
          repeatBlock_regsBlock_13_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_13_reg3_wack <= repeatBlock_regsBlock_13_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_14_reg1
  repeatBlock_regsBlock_14_reg1_o <= repeatBlock_regsBlock_14_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_14_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_14_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_14_reg1_wreq = '1' then
          repeatBlock_regsBlock_14_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_14_reg1_wack <= repeatBlock_regsBlock_14_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_14_reg2
  repeatBlock_regsBlock_14_reg2_o <= repeatBlock_regsBlock_14_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_14_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_14_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_14_reg2_wreq = '1' then
          repeatBlock_regsBlock_14_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_14_reg2_wack <= repeatBlock_regsBlock_14_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_14_reg3
  repeatBlock_regsBlock_14_reg3_o <= repeatBlock_regsBlock_14_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_14_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_14_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_14_reg3_wreq = '1' then
          repeatBlock_regsBlock_14_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_14_reg3_wack <= repeatBlock_regsBlock_14_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_15_reg1
  repeatBlock_regsBlock_15_reg1_o <= repeatBlock_regsBlock_15_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_15_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_15_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_15_reg1_wreq = '1' then
          repeatBlock_regsBlock_15_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_15_reg1_wack <= repeatBlock_regsBlock_15_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_15_reg2
  repeatBlock_regsBlock_15_reg2_o <= repeatBlock_regsBlock_15_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_15_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_15_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_15_reg2_wreq = '1' then
          repeatBlock_regsBlock_15_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_15_reg2_wack <= repeatBlock_regsBlock_15_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_15_reg3
  repeatBlock_regsBlock_15_reg3_o <= repeatBlock_regsBlock_15_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_15_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_15_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_15_reg3_wreq = '1' then
          repeatBlock_regsBlock_15_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_15_reg3_wack <= repeatBlock_regsBlock_15_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_16_reg1
  repeatBlock_regsBlock_16_reg1_o <= repeatBlock_regsBlock_16_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_16_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_16_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_16_reg1_wreq = '1' then
          repeatBlock_regsBlock_16_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_16_reg1_wack <= repeatBlock_regsBlock_16_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_16_reg2
  repeatBlock_regsBlock_16_reg2_o <= repeatBlock_regsBlock_16_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_16_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_16_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_16_reg2_wreq = '1' then
          repeatBlock_regsBlock_16_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_16_reg2_wack <= repeatBlock_regsBlock_16_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_16_reg3
  repeatBlock_regsBlock_16_reg3_o <= repeatBlock_regsBlock_16_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_16_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_16_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_16_reg3_wreq = '1' then
          repeatBlock_regsBlock_16_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_16_reg3_wack <= repeatBlock_regsBlock_16_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_17_reg1
  repeatBlock_regsBlock_17_reg1_o <= repeatBlock_regsBlock_17_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_17_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_17_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_17_reg1_wreq = '1' then
          repeatBlock_regsBlock_17_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_17_reg1_wack <= repeatBlock_regsBlock_17_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_17_reg2
  repeatBlock_regsBlock_17_reg2_o <= repeatBlock_regsBlock_17_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_17_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_17_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_17_reg2_wreq = '1' then
          repeatBlock_regsBlock_17_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_17_reg2_wack <= repeatBlock_regsBlock_17_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_17_reg3
  repeatBlock_regsBlock_17_reg3_o <= repeatBlock_regsBlock_17_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_17_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_17_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_17_reg3_wreq = '1' then
          repeatBlock_regsBlock_17_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_17_reg3_wack <= repeatBlock_regsBlock_17_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_18_reg1
  repeatBlock_regsBlock_18_reg1_o <= repeatBlock_regsBlock_18_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_18_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_18_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_18_reg1_wreq = '1' then
          repeatBlock_regsBlock_18_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_18_reg1_wack <= repeatBlock_regsBlock_18_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_18_reg2
  repeatBlock_regsBlock_18_reg2_o <= repeatBlock_regsBlock_18_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_18_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_18_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_18_reg2_wreq = '1' then
          repeatBlock_regsBlock_18_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_18_reg2_wack <= repeatBlock_regsBlock_18_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_18_reg3
  repeatBlock_regsBlock_18_reg3_o <= repeatBlock_regsBlock_18_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_18_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_18_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_18_reg3_wreq = '1' then
          repeatBlock_regsBlock_18_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_18_reg3_wack <= repeatBlock_regsBlock_18_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_19_reg1
  repeatBlock_regsBlock_19_reg1_o <= repeatBlock_regsBlock_19_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_19_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_19_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_19_reg1_wreq = '1' then
          repeatBlock_regsBlock_19_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_19_reg1_wack <= repeatBlock_regsBlock_19_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_19_reg2
  repeatBlock_regsBlock_19_reg2_o <= repeatBlock_regsBlock_19_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_19_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_19_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_19_reg2_wreq = '1' then
          repeatBlock_regsBlock_19_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_19_reg2_wack <= repeatBlock_regsBlock_19_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_19_reg3
  repeatBlock_regsBlock_19_reg3_o <= repeatBlock_regsBlock_19_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_19_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_19_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_19_reg3_wreq = '1' then
          repeatBlock_regsBlock_19_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_19_reg3_wack <= repeatBlock_regsBlock_19_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_20_reg1
  repeatBlock_regsBlock_20_reg1_o <= repeatBlock_regsBlock_20_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_20_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_20_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_20_reg1_wreq = '1' then
          repeatBlock_regsBlock_20_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_20_reg1_wack <= repeatBlock_regsBlock_20_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_20_reg2
  repeatBlock_regsBlock_20_reg2_o <= repeatBlock_regsBlock_20_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_20_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_20_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_20_reg2_wreq = '1' then
          repeatBlock_regsBlock_20_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_20_reg2_wack <= repeatBlock_regsBlock_20_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_20_reg3
  repeatBlock_regsBlock_20_reg3_o <= repeatBlock_regsBlock_20_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_20_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_20_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_20_reg3_wreq = '1' then
          repeatBlock_regsBlock_20_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_20_reg3_wack <= repeatBlock_regsBlock_20_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_21_reg1
  repeatBlock_regsBlock_21_reg1_o <= repeatBlock_regsBlock_21_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_21_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_21_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_21_reg1_wreq = '1' then
          repeatBlock_regsBlock_21_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_21_reg1_wack <= repeatBlock_regsBlock_21_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_21_reg2
  repeatBlock_regsBlock_21_reg2_o <= repeatBlock_regsBlock_21_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_21_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_21_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_21_reg2_wreq = '1' then
          repeatBlock_regsBlock_21_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_21_reg2_wack <= repeatBlock_regsBlock_21_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_21_reg3
  repeatBlock_regsBlock_21_reg3_o <= repeatBlock_regsBlock_21_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_21_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_21_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_21_reg3_wreq = '1' then
          repeatBlock_regsBlock_21_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_21_reg3_wack <= repeatBlock_regsBlock_21_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_22_reg1
  repeatBlock_regsBlock_22_reg1_o <= repeatBlock_regsBlock_22_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_22_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_22_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_22_reg1_wreq = '1' then
          repeatBlock_regsBlock_22_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_22_reg1_wack <= repeatBlock_regsBlock_22_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_22_reg2
  repeatBlock_regsBlock_22_reg2_o <= repeatBlock_regsBlock_22_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_22_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_22_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_22_reg2_wreq = '1' then
          repeatBlock_regsBlock_22_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_22_reg2_wack <= repeatBlock_regsBlock_22_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_22_reg3
  repeatBlock_regsBlock_22_reg3_o <= repeatBlock_regsBlock_22_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_22_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_22_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_22_reg3_wreq = '1' then
          repeatBlock_regsBlock_22_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_22_reg3_wack <= repeatBlock_regsBlock_22_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_23_reg1
  repeatBlock_regsBlock_23_reg1_o <= repeatBlock_regsBlock_23_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_23_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_23_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_23_reg1_wreq = '1' then
          repeatBlock_regsBlock_23_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_23_reg1_wack <= repeatBlock_regsBlock_23_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_23_reg2
  repeatBlock_regsBlock_23_reg2_o <= repeatBlock_regsBlock_23_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_23_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_23_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_23_reg2_wreq = '1' then
          repeatBlock_regsBlock_23_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_23_reg2_wack <= repeatBlock_regsBlock_23_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_23_reg3
  repeatBlock_regsBlock_23_reg3_o <= repeatBlock_regsBlock_23_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_23_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_23_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_23_reg3_wreq = '1' then
          repeatBlock_regsBlock_23_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_23_reg3_wack <= repeatBlock_regsBlock_23_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_24_reg1
  repeatBlock_regsBlock_24_reg1_o <= repeatBlock_regsBlock_24_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_24_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_24_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_24_reg1_wreq = '1' then
          repeatBlock_regsBlock_24_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_24_reg1_wack <= repeatBlock_regsBlock_24_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_24_reg2
  repeatBlock_regsBlock_24_reg2_o <= repeatBlock_regsBlock_24_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_24_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_24_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_24_reg2_wreq = '1' then
          repeatBlock_regsBlock_24_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_24_reg2_wack <= repeatBlock_regsBlock_24_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_24_reg3
  repeatBlock_regsBlock_24_reg3_o <= repeatBlock_regsBlock_24_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_24_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_24_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_24_reg3_wreq = '1' then
          repeatBlock_regsBlock_24_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_24_reg3_wack <= repeatBlock_regsBlock_24_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_25_reg1
  repeatBlock_regsBlock_25_reg1_o <= repeatBlock_regsBlock_25_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_25_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_25_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_25_reg1_wreq = '1' then
          repeatBlock_regsBlock_25_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_25_reg1_wack <= repeatBlock_regsBlock_25_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_25_reg2
  repeatBlock_regsBlock_25_reg2_o <= repeatBlock_regsBlock_25_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_25_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_25_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_25_reg2_wreq = '1' then
          repeatBlock_regsBlock_25_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_25_reg2_wack <= repeatBlock_regsBlock_25_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_25_reg3
  repeatBlock_regsBlock_25_reg3_o <= repeatBlock_regsBlock_25_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_25_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_25_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_25_reg3_wreq = '1' then
          repeatBlock_regsBlock_25_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_25_reg3_wack <= repeatBlock_regsBlock_25_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_26_reg1
  repeatBlock_regsBlock_26_reg1_o <= repeatBlock_regsBlock_26_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_26_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_26_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_26_reg1_wreq = '1' then
          repeatBlock_regsBlock_26_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_26_reg1_wack <= repeatBlock_regsBlock_26_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_26_reg2
  repeatBlock_regsBlock_26_reg2_o <= repeatBlock_regsBlock_26_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_26_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_26_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_26_reg2_wreq = '1' then
          repeatBlock_regsBlock_26_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_26_reg2_wack <= repeatBlock_regsBlock_26_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_26_reg3
  repeatBlock_regsBlock_26_reg3_o <= repeatBlock_regsBlock_26_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_26_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_26_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_26_reg3_wreq = '1' then
          repeatBlock_regsBlock_26_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_26_reg3_wack <= repeatBlock_regsBlock_26_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_27_reg1
  repeatBlock_regsBlock_27_reg1_o <= repeatBlock_regsBlock_27_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_27_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_27_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_27_reg1_wreq = '1' then
          repeatBlock_regsBlock_27_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_27_reg1_wack <= repeatBlock_regsBlock_27_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_27_reg2
  repeatBlock_regsBlock_27_reg2_o <= repeatBlock_regsBlock_27_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_27_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_27_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_27_reg2_wreq = '1' then
          repeatBlock_regsBlock_27_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_27_reg2_wack <= repeatBlock_regsBlock_27_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_27_reg3
  repeatBlock_regsBlock_27_reg3_o <= repeatBlock_regsBlock_27_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_27_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_27_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_27_reg3_wreq = '1' then
          repeatBlock_regsBlock_27_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_27_reg3_wack <= repeatBlock_regsBlock_27_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_28_reg1
  repeatBlock_regsBlock_28_reg1_o <= repeatBlock_regsBlock_28_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_28_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_28_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_28_reg1_wreq = '1' then
          repeatBlock_regsBlock_28_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_28_reg1_wack <= repeatBlock_regsBlock_28_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_28_reg2
  repeatBlock_regsBlock_28_reg2_o <= repeatBlock_regsBlock_28_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_28_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_28_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_28_reg2_wreq = '1' then
          repeatBlock_regsBlock_28_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_28_reg2_wack <= repeatBlock_regsBlock_28_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_28_reg3
  repeatBlock_regsBlock_28_reg3_o <= repeatBlock_regsBlock_28_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_28_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_28_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_28_reg3_wreq = '1' then
          repeatBlock_regsBlock_28_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_28_reg3_wack <= repeatBlock_regsBlock_28_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_29_reg1
  repeatBlock_regsBlock_29_reg1_o <= repeatBlock_regsBlock_29_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_29_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_29_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_29_reg1_wreq = '1' then
          repeatBlock_regsBlock_29_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_29_reg1_wack <= repeatBlock_regsBlock_29_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_29_reg2
  repeatBlock_regsBlock_29_reg2_o <= repeatBlock_regsBlock_29_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_29_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_29_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_29_reg2_wreq = '1' then
          repeatBlock_regsBlock_29_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_29_reg2_wack <= repeatBlock_regsBlock_29_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_29_reg3
  repeatBlock_regsBlock_29_reg3_o <= repeatBlock_regsBlock_29_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_29_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_29_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_29_reg3_wreq = '1' then
          repeatBlock_regsBlock_29_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_29_reg3_wack <= repeatBlock_regsBlock_29_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_30_reg1
  repeatBlock_regsBlock_30_reg1_o <= repeatBlock_regsBlock_30_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_30_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_30_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_30_reg1_wreq = '1' then
          repeatBlock_regsBlock_30_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_30_reg1_wack <= repeatBlock_regsBlock_30_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_30_reg2
  repeatBlock_regsBlock_30_reg2_o <= repeatBlock_regsBlock_30_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_30_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_30_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_30_reg2_wreq = '1' then
          repeatBlock_regsBlock_30_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_30_reg2_wack <= repeatBlock_regsBlock_30_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_30_reg3
  repeatBlock_regsBlock_30_reg3_o <= repeatBlock_regsBlock_30_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_30_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_30_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_30_reg3_wreq = '1' then
          repeatBlock_regsBlock_30_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_30_reg3_wack <= repeatBlock_regsBlock_30_reg3_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_31_reg1
  repeatBlock_regsBlock_31_reg1_o <= repeatBlock_regsBlock_31_reg1_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_31_reg1_reg <= "0000000000000000";
        repeatBlock_regsBlock_31_reg1_wack <= '0';
      else
        if repeatBlock_regsBlock_31_reg1_wreq = '1' then
          repeatBlock_regsBlock_31_reg1_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_31_reg1_wack <= repeatBlock_regsBlock_31_reg1_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_31_reg2
  repeatBlock_regsBlock_31_reg2_o <= repeatBlock_regsBlock_31_reg2_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_31_reg2_reg <= "00000000000000000000000000000000";
        repeatBlock_regsBlock_31_reg2_wack <= '0';
      else
        if repeatBlock_regsBlock_31_reg2_wreq = '1' then
          repeatBlock_regsBlock_31_reg2_reg <= wr_dat_d0;
        end if;
        repeatBlock_regsBlock_31_reg2_wack <= repeatBlock_regsBlock_31_reg2_wreq;
      end if;
    end if;
  end process;

  -- Register repeatBlock_regsBlock_31_reg3
  repeatBlock_regsBlock_31_reg3_o <= repeatBlock_regsBlock_31_reg3_reg;
  process (aclk) begin
    if rising_edge(aclk) then
      if areset_n = '0' then
        repeatBlock_regsBlock_31_reg3_reg <= "0000000000000000";
        repeatBlock_regsBlock_31_reg3_wack <= '0';
      else
        if repeatBlock_regsBlock_31_reg3_wreq = '1' then
          repeatBlock_regsBlock_31_reg3_reg <= wr_dat_d0(15 downto 0);
        end if;
        repeatBlock_regsBlock_31_reg3_wack <= repeatBlock_regsBlock_31_reg3_wreq;
      end if;
    end if;
  end process;

  -- Process for write requests.
  process (wr_adr_d0, wr_req_d0, repeatBlock_regsBlock_0_reg1_wack, repeatBlock_regsBlock_0_reg2_wack, repeatBlock_regsBlock_0_reg3_wack, repeatBlock_regsBlock_1_reg1_wack, repeatBlock_regsBlock_1_reg2_wack, repeatBlock_regsBlock_1_reg3_wack, repeatBlock_regsBlock_2_reg1_wack, repeatBlock_regsBlock_2_reg2_wack, repeatBlock_regsBlock_2_reg3_wack, repeatBlock_regsBlock_3_reg1_wack, repeatBlock_regsBlock_3_reg2_wack, repeatBlock_regsBlock_3_reg3_wack, repeatBlock_regsBlock_4_reg1_wack, repeatBlock_regsBlock_4_reg2_wack, repeatBlock_regsBlock_4_reg3_wack, repeatBlock_regsBlock_5_reg1_wack, repeatBlock_regsBlock_5_reg2_wack, repeatBlock_regsBlock_5_reg3_wack, repeatBlock_regsBlock_6_reg1_wack, repeatBlock_regsBlock_6_reg2_wack, repeatBlock_regsBlock_6_reg3_wack, repeatBlock_regsBlock_7_reg1_wack, repeatBlock_regsBlock_7_reg2_wack, repeatBlock_regsBlock_7_reg3_wack, repeatBlock_regsBlock_8_reg1_wack, repeatBlock_regsBlock_8_reg2_wack, repeatBlock_regsBlock_8_reg3_wack, repeatBlock_regsBlock_9_reg1_wack, repeatBlock_regsBlock_9_reg2_wack, repeatBlock_regsBlock_9_reg3_wack, repeatBlock_regsBlock_10_reg1_wack, repeatBlock_regsBlock_10_reg2_wack, repeatBlock_regsBlock_10_reg3_wack, repeatBlock_regsBlock_11_reg1_wack, repeatBlock_regsBlock_11_reg2_wack, repeatBlock_regsBlock_11_reg3_wack, repeatBlock_regsBlock_12_reg1_wack, repeatBlock_regsBlock_12_reg2_wack, repeatBlock_regsBlock_12_reg3_wack, repeatBlock_regsBlock_13_reg1_wack, repeatBlock_regsBlock_13_reg2_wack, repeatBlock_regsBlock_13_reg3_wack, repeatBlock_regsBlock_14_reg1_wack, repeatBlock_regsBlock_14_reg2_wack, repeatBlock_regsBlock_14_reg3_wack, repeatBlock_regsBlock_15_reg1_wack, repeatBlock_regsBlock_15_reg2_wack, repeatBlock_regsBlock_15_reg3_wack, repeatBlock_regsBlock_16_reg1_wack, repeatBlock_regsBlock_16_reg2_wack, repeatBlock_regsBlock_16_reg3_wack, repeatBlock_regsBlock_17_reg1_wack, repeatBlock_regsBlock_17_reg2_wack, repeatBlock_regsBlock_17_reg3_wack, repeatBlock_regsBlock_18_reg1_wack, repeatBlock_regsBlock_18_reg2_wack, repeatBlock_regsBlock_18_reg3_wack, repeatBlock_regsBlock_19_reg1_wack, repeatBlock_regsBlock_19_reg2_wack, repeatBlock_regsBlock_19_reg3_wack, repeatBlock_regsBlock_20_reg1_wack, repeatBlock_regsBlock_20_reg2_wack, repeatBlock_regsBlock_20_reg3_wack, repeatBlock_regsBlock_21_reg1_wack, repeatBlock_regsBlock_21_reg2_wack, repeatBlock_regsBlock_21_reg3_wack, repeatBlock_regsBlock_22_reg1_wack, repeatBlock_regsBlock_22_reg2_wack, repeatBlock_regsBlock_22_reg3_wack, repeatBlock_regsBlock_23_reg1_wack, repeatBlock_regsBlock_23_reg2_wack, repeatBlock_regsBlock_23_reg3_wack, repeatBlock_regsBlock_24_reg1_wack, repeatBlock_regsBlock_24_reg2_wack, repeatBlock_regsBlock_24_reg3_wack, repeatBlock_regsBlock_25_reg1_wack, repeatBlock_regsBlock_25_reg2_wack, repeatBlock_regsBlock_25_reg3_wack, repeatBlock_regsBlock_26_reg1_wack, repeatBlock_regsBlock_26_reg2_wack, repeatBlock_regsBlock_26_reg3_wack, repeatBlock_regsBlock_27_reg1_wack, repeatBlock_regsBlock_27_reg2_wack, repeatBlock_regsBlock_27_reg3_wack, repeatBlock_regsBlock_28_reg1_wack, repeatBlock_regsBlock_28_reg2_wack, repeatBlock_regsBlock_28_reg3_wack, repeatBlock_regsBlock_29_reg1_wack, repeatBlock_regsBlock_29_reg2_wack, repeatBlock_regsBlock_29_reg3_wack, repeatBlock_regsBlock_30_reg1_wack, repeatBlock_regsBlock_30_reg2_wack, repeatBlock_regsBlock_30_reg3_wack, repeatBlock_regsBlock_31_reg1_wack, repeatBlock_regsBlock_31_reg2_wack, repeatBlock_regsBlock_31_reg3_wack) begin
    repeatBlock_regsBlock_0_reg1_wreq <= '0';
    repeatBlock_regsBlock_0_reg2_wreq <= '0';
    repeatBlock_regsBlock_0_reg3_wreq <= '0';
    repeatBlock_regsBlock_1_reg1_wreq <= '0';
    repeatBlock_regsBlock_1_reg2_wreq <= '0';
    repeatBlock_regsBlock_1_reg3_wreq <= '0';
    repeatBlock_regsBlock_2_reg1_wreq <= '0';
    repeatBlock_regsBlock_2_reg2_wreq <= '0';
    repeatBlock_regsBlock_2_reg3_wreq <= '0';
    repeatBlock_regsBlock_3_reg1_wreq <= '0';
    repeatBlock_regsBlock_3_reg2_wreq <= '0';
    repeatBlock_regsBlock_3_reg3_wreq <= '0';
    repeatBlock_regsBlock_4_reg1_wreq <= '0';
    repeatBlock_regsBlock_4_reg2_wreq <= '0';
    repeatBlock_regsBlock_4_reg3_wreq <= '0';
    repeatBlock_regsBlock_5_reg1_wreq <= '0';
    repeatBlock_regsBlock_5_reg2_wreq <= '0';
    repeatBlock_regsBlock_5_reg3_wreq <= '0';
    repeatBlock_regsBlock_6_reg1_wreq <= '0';
    repeatBlock_regsBlock_6_reg2_wreq <= '0';
    repeatBlock_regsBlock_6_reg3_wreq <= '0';
    repeatBlock_regsBlock_7_reg1_wreq <= '0';
    repeatBlock_regsBlock_7_reg2_wreq <= '0';
    repeatBlock_regsBlock_7_reg3_wreq <= '0';
    repeatBlock_regsBlock_8_reg1_wreq <= '0';
    repeatBlock_regsBlock_8_reg2_wreq <= '0';
    repeatBlock_regsBlock_8_reg3_wreq <= '0';
    repeatBlock_regsBlock_9_reg1_wreq <= '0';
    repeatBlock_regsBlock_9_reg2_wreq <= '0';
    repeatBlock_regsBlock_9_reg3_wreq <= '0';
    repeatBlock_regsBlock_10_reg1_wreq <= '0';
    repeatBlock_regsBlock_10_reg2_wreq <= '0';
    repeatBlock_regsBlock_10_reg3_wreq <= '0';
    repeatBlock_regsBlock_11_reg1_wreq <= '0';
    repeatBlock_regsBlock_11_reg2_wreq <= '0';
    repeatBlock_regsBlock_11_reg3_wreq <= '0';
    repeatBlock_regsBlock_12_reg1_wreq <= '0';
    repeatBlock_regsBlock_12_reg2_wreq <= '0';
    repeatBlock_regsBlock_12_reg3_wreq <= '0';
    repeatBlock_regsBlock_13_reg1_wreq <= '0';
    repeatBlock_regsBlock_13_reg2_wreq <= '0';
    repeatBlock_regsBlock_13_reg3_wreq <= '0';
    repeatBlock_regsBlock_14_reg1_wreq <= '0';
    repeatBlock_regsBlock_14_reg2_wreq <= '0';
    repeatBlock_regsBlock_14_reg3_wreq <= '0';
    repeatBlock_regsBlock_15_reg1_wreq <= '0';
    repeatBlock_regsBlock_15_reg2_wreq <= '0';
    repeatBlock_regsBlock_15_reg3_wreq <= '0';
    repeatBlock_regsBlock_16_reg1_wreq <= '0';
    repeatBlock_regsBlock_16_reg2_wreq <= '0';
    repeatBlock_regsBlock_16_reg3_wreq <= '0';
    repeatBlock_regsBlock_17_reg1_wreq <= '0';
    repeatBlock_regsBlock_17_reg2_wreq <= '0';
    repeatBlock_regsBlock_17_reg3_wreq <= '0';
    repeatBlock_regsBlock_18_reg1_wreq <= '0';
    repeatBlock_regsBlock_18_reg2_wreq <= '0';
    repeatBlock_regsBlock_18_reg3_wreq <= '0';
    repeatBlock_regsBlock_19_reg1_wreq <= '0';
    repeatBlock_regsBlock_19_reg2_wreq <= '0';
    repeatBlock_regsBlock_19_reg3_wreq <= '0';
    repeatBlock_regsBlock_20_reg1_wreq <= '0';
    repeatBlock_regsBlock_20_reg2_wreq <= '0';
    repeatBlock_regsBlock_20_reg3_wreq <= '0';
    repeatBlock_regsBlock_21_reg1_wreq <= '0';
    repeatBlock_regsBlock_21_reg2_wreq <= '0';
    repeatBlock_regsBlock_21_reg3_wreq <= '0';
    repeatBlock_regsBlock_22_reg1_wreq <= '0';
    repeatBlock_regsBlock_22_reg2_wreq <= '0';
    repeatBlock_regsBlock_22_reg3_wreq <= '0';
    repeatBlock_regsBlock_23_reg1_wreq <= '0';
    repeatBlock_regsBlock_23_reg2_wreq <= '0';
    repeatBlock_regsBlock_23_reg3_wreq <= '0';
    repeatBlock_regsBlock_24_reg1_wreq <= '0';
    repeatBlock_regsBlock_24_reg2_wreq <= '0';
    repeatBlock_regsBlock_24_reg3_wreq <= '0';
    repeatBlock_regsBlock_25_reg1_wreq <= '0';
    repeatBlock_regsBlock_25_reg2_wreq <= '0';
    repeatBlock_regsBlock_25_reg3_wreq <= '0';
    repeatBlock_regsBlock_26_reg1_wreq <= '0';
    repeatBlock_regsBlock_26_reg2_wreq <= '0';
    repeatBlock_regsBlock_26_reg3_wreq <= '0';
    repeatBlock_regsBlock_27_reg1_wreq <= '0';
    repeatBlock_regsBlock_27_reg2_wreq <= '0';
    repeatBlock_regsBlock_27_reg3_wreq <= '0';
    repeatBlock_regsBlock_28_reg1_wreq <= '0';
    repeatBlock_regsBlock_28_reg2_wreq <= '0';
    repeatBlock_regsBlock_28_reg3_wreq <= '0';
    repeatBlock_regsBlock_29_reg1_wreq <= '0';
    repeatBlock_regsBlock_29_reg2_wreq <= '0';
    repeatBlock_regsBlock_29_reg3_wreq <= '0';
    repeatBlock_regsBlock_30_reg1_wreq <= '0';
    repeatBlock_regsBlock_30_reg2_wreq <= '0';
    repeatBlock_regsBlock_30_reg3_wreq <= '0';
    repeatBlock_regsBlock_31_reg1_wreq <= '0';
    repeatBlock_regsBlock_31_reg2_wreq <= '0';
    repeatBlock_regsBlock_31_reg3_wreq <= '0';
    case wr_adr_d0(8 downto 2) is
    when "0000000" => 
      -- repeatBlock_regsBlock_0_reg1
      repeatBlock_regsBlock_0_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_0_reg1_wack;
    when "0000001" => 
      -- repeatBlock_regsBlock_0_reg2
      repeatBlock_regsBlock_0_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_0_reg2_wack;
    when "0000010" => 
      -- repeatBlock_regsBlock_0_reg3
      repeatBlock_regsBlock_0_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_0_reg3_wack;
    when "0000100" => 
      -- repeatBlock_regsBlock_1_reg1
      repeatBlock_regsBlock_1_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_1_reg1_wack;
    when "0000101" => 
      -- repeatBlock_regsBlock_1_reg2
      repeatBlock_regsBlock_1_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_1_reg2_wack;
    when "0000110" => 
      -- repeatBlock_regsBlock_1_reg3
      repeatBlock_regsBlock_1_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_1_reg3_wack;
    when "0001000" => 
      -- repeatBlock_regsBlock_2_reg1
      repeatBlock_regsBlock_2_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_2_reg1_wack;
    when "0001001" => 
      -- repeatBlock_regsBlock_2_reg2
      repeatBlock_regsBlock_2_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_2_reg2_wack;
    when "0001010" => 
      -- repeatBlock_regsBlock_2_reg3
      repeatBlock_regsBlock_2_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_2_reg3_wack;
    when "0001100" => 
      -- repeatBlock_regsBlock_3_reg1
      repeatBlock_regsBlock_3_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_3_reg1_wack;
    when "0001101" => 
      -- repeatBlock_regsBlock_3_reg2
      repeatBlock_regsBlock_3_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_3_reg2_wack;
    when "0001110" => 
      -- repeatBlock_regsBlock_3_reg3
      repeatBlock_regsBlock_3_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_3_reg3_wack;
    when "0010000" => 
      -- repeatBlock_regsBlock_4_reg1
      repeatBlock_regsBlock_4_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_4_reg1_wack;
    when "0010001" => 
      -- repeatBlock_regsBlock_4_reg2
      repeatBlock_regsBlock_4_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_4_reg2_wack;
    when "0010010" => 
      -- repeatBlock_regsBlock_4_reg3
      repeatBlock_regsBlock_4_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_4_reg3_wack;
    when "0010100" => 
      -- repeatBlock_regsBlock_5_reg1
      repeatBlock_regsBlock_5_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_5_reg1_wack;
    when "0010101" => 
      -- repeatBlock_regsBlock_5_reg2
      repeatBlock_regsBlock_5_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_5_reg2_wack;
    when "0010110" => 
      -- repeatBlock_regsBlock_5_reg3
      repeatBlock_regsBlock_5_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_5_reg3_wack;
    when "0011000" => 
      -- repeatBlock_regsBlock_6_reg1
      repeatBlock_regsBlock_6_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_6_reg1_wack;
    when "0011001" => 
      -- repeatBlock_regsBlock_6_reg2
      repeatBlock_regsBlock_6_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_6_reg2_wack;
    when "0011010" => 
      -- repeatBlock_regsBlock_6_reg3
      repeatBlock_regsBlock_6_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_6_reg3_wack;
    when "0011100" => 
      -- repeatBlock_regsBlock_7_reg1
      repeatBlock_regsBlock_7_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_7_reg1_wack;
    when "0011101" => 
      -- repeatBlock_regsBlock_7_reg2
      repeatBlock_regsBlock_7_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_7_reg2_wack;
    when "0011110" => 
      -- repeatBlock_regsBlock_7_reg3
      repeatBlock_regsBlock_7_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_7_reg3_wack;
    when "0100000" => 
      -- repeatBlock_regsBlock_8_reg1
      repeatBlock_regsBlock_8_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_8_reg1_wack;
    when "0100001" => 
      -- repeatBlock_regsBlock_8_reg2
      repeatBlock_regsBlock_8_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_8_reg2_wack;
    when "0100010" => 
      -- repeatBlock_regsBlock_8_reg3
      repeatBlock_regsBlock_8_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_8_reg3_wack;
    when "0100100" => 
      -- repeatBlock_regsBlock_9_reg1
      repeatBlock_regsBlock_9_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_9_reg1_wack;
    when "0100101" => 
      -- repeatBlock_regsBlock_9_reg2
      repeatBlock_regsBlock_9_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_9_reg2_wack;
    when "0100110" => 
      -- repeatBlock_regsBlock_9_reg3
      repeatBlock_regsBlock_9_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_9_reg3_wack;
    when "0101000" => 
      -- repeatBlock_regsBlock_10_reg1
      repeatBlock_regsBlock_10_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_10_reg1_wack;
    when "0101001" => 
      -- repeatBlock_regsBlock_10_reg2
      repeatBlock_regsBlock_10_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_10_reg2_wack;
    when "0101010" => 
      -- repeatBlock_regsBlock_10_reg3
      repeatBlock_regsBlock_10_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_10_reg3_wack;
    when "0101100" => 
      -- repeatBlock_regsBlock_11_reg1
      repeatBlock_regsBlock_11_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_11_reg1_wack;
    when "0101101" => 
      -- repeatBlock_regsBlock_11_reg2
      repeatBlock_regsBlock_11_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_11_reg2_wack;
    when "0101110" => 
      -- repeatBlock_regsBlock_11_reg3
      repeatBlock_regsBlock_11_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_11_reg3_wack;
    when "0110000" => 
      -- repeatBlock_regsBlock_12_reg1
      repeatBlock_regsBlock_12_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_12_reg1_wack;
    when "0110001" => 
      -- repeatBlock_regsBlock_12_reg2
      repeatBlock_regsBlock_12_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_12_reg2_wack;
    when "0110010" => 
      -- repeatBlock_regsBlock_12_reg3
      repeatBlock_regsBlock_12_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_12_reg3_wack;
    when "0110100" => 
      -- repeatBlock_regsBlock_13_reg1
      repeatBlock_regsBlock_13_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_13_reg1_wack;
    when "0110101" => 
      -- repeatBlock_regsBlock_13_reg2
      repeatBlock_regsBlock_13_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_13_reg2_wack;
    when "0110110" => 
      -- repeatBlock_regsBlock_13_reg3
      repeatBlock_regsBlock_13_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_13_reg3_wack;
    when "0111000" => 
      -- repeatBlock_regsBlock_14_reg1
      repeatBlock_regsBlock_14_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_14_reg1_wack;
    when "0111001" => 
      -- repeatBlock_regsBlock_14_reg2
      repeatBlock_regsBlock_14_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_14_reg2_wack;
    when "0111010" => 
      -- repeatBlock_regsBlock_14_reg3
      repeatBlock_regsBlock_14_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_14_reg3_wack;
    when "0111100" => 
      -- repeatBlock_regsBlock_15_reg1
      repeatBlock_regsBlock_15_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_15_reg1_wack;
    when "0111101" => 
      -- repeatBlock_regsBlock_15_reg2
      repeatBlock_regsBlock_15_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_15_reg2_wack;
    when "0111110" => 
      -- repeatBlock_regsBlock_15_reg3
      repeatBlock_regsBlock_15_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_15_reg3_wack;
    when "1000000" => 
      -- repeatBlock_regsBlock_16_reg1
      repeatBlock_regsBlock_16_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_16_reg1_wack;
    when "1000001" => 
      -- repeatBlock_regsBlock_16_reg2
      repeatBlock_regsBlock_16_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_16_reg2_wack;
    when "1000010" => 
      -- repeatBlock_regsBlock_16_reg3
      repeatBlock_regsBlock_16_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_16_reg3_wack;
    when "1000100" => 
      -- repeatBlock_regsBlock_17_reg1
      repeatBlock_regsBlock_17_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_17_reg1_wack;
    when "1000101" => 
      -- repeatBlock_regsBlock_17_reg2
      repeatBlock_regsBlock_17_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_17_reg2_wack;
    when "1000110" => 
      -- repeatBlock_regsBlock_17_reg3
      repeatBlock_regsBlock_17_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_17_reg3_wack;
    when "1001000" => 
      -- repeatBlock_regsBlock_18_reg1
      repeatBlock_regsBlock_18_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_18_reg1_wack;
    when "1001001" => 
      -- repeatBlock_regsBlock_18_reg2
      repeatBlock_regsBlock_18_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_18_reg2_wack;
    when "1001010" => 
      -- repeatBlock_regsBlock_18_reg3
      repeatBlock_regsBlock_18_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_18_reg3_wack;
    when "1001100" => 
      -- repeatBlock_regsBlock_19_reg1
      repeatBlock_regsBlock_19_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_19_reg1_wack;
    when "1001101" => 
      -- repeatBlock_regsBlock_19_reg2
      repeatBlock_regsBlock_19_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_19_reg2_wack;
    when "1001110" => 
      -- repeatBlock_regsBlock_19_reg3
      repeatBlock_regsBlock_19_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_19_reg3_wack;
    when "1010000" => 
      -- repeatBlock_regsBlock_20_reg1
      repeatBlock_regsBlock_20_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_20_reg1_wack;
    when "1010001" => 
      -- repeatBlock_regsBlock_20_reg2
      repeatBlock_regsBlock_20_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_20_reg2_wack;
    when "1010010" => 
      -- repeatBlock_regsBlock_20_reg3
      repeatBlock_regsBlock_20_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_20_reg3_wack;
    when "1010100" => 
      -- repeatBlock_regsBlock_21_reg1
      repeatBlock_regsBlock_21_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_21_reg1_wack;
    when "1010101" => 
      -- repeatBlock_regsBlock_21_reg2
      repeatBlock_regsBlock_21_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_21_reg2_wack;
    when "1010110" => 
      -- repeatBlock_regsBlock_21_reg3
      repeatBlock_regsBlock_21_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_21_reg3_wack;
    when "1011000" => 
      -- repeatBlock_regsBlock_22_reg1
      repeatBlock_regsBlock_22_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_22_reg1_wack;
    when "1011001" => 
      -- repeatBlock_regsBlock_22_reg2
      repeatBlock_regsBlock_22_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_22_reg2_wack;
    when "1011010" => 
      -- repeatBlock_regsBlock_22_reg3
      repeatBlock_regsBlock_22_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_22_reg3_wack;
    when "1011100" => 
      -- repeatBlock_regsBlock_23_reg1
      repeatBlock_regsBlock_23_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_23_reg1_wack;
    when "1011101" => 
      -- repeatBlock_regsBlock_23_reg2
      repeatBlock_regsBlock_23_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_23_reg2_wack;
    when "1011110" => 
      -- repeatBlock_regsBlock_23_reg3
      repeatBlock_regsBlock_23_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_23_reg3_wack;
    when "1100000" => 
      -- repeatBlock_regsBlock_24_reg1
      repeatBlock_regsBlock_24_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_24_reg1_wack;
    when "1100001" => 
      -- repeatBlock_regsBlock_24_reg2
      repeatBlock_regsBlock_24_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_24_reg2_wack;
    when "1100010" => 
      -- repeatBlock_regsBlock_24_reg3
      repeatBlock_regsBlock_24_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_24_reg3_wack;
    when "1100100" => 
      -- repeatBlock_regsBlock_25_reg1
      repeatBlock_regsBlock_25_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_25_reg1_wack;
    when "1100101" => 
      -- repeatBlock_regsBlock_25_reg2
      repeatBlock_regsBlock_25_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_25_reg2_wack;
    when "1100110" => 
      -- repeatBlock_regsBlock_25_reg3
      repeatBlock_regsBlock_25_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_25_reg3_wack;
    when "1101000" => 
      -- repeatBlock_regsBlock_26_reg1
      repeatBlock_regsBlock_26_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_26_reg1_wack;
    when "1101001" => 
      -- repeatBlock_regsBlock_26_reg2
      repeatBlock_regsBlock_26_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_26_reg2_wack;
    when "1101010" => 
      -- repeatBlock_regsBlock_26_reg3
      repeatBlock_regsBlock_26_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_26_reg3_wack;
    when "1101100" => 
      -- repeatBlock_regsBlock_27_reg1
      repeatBlock_regsBlock_27_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_27_reg1_wack;
    when "1101101" => 
      -- repeatBlock_regsBlock_27_reg2
      repeatBlock_regsBlock_27_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_27_reg2_wack;
    when "1101110" => 
      -- repeatBlock_regsBlock_27_reg3
      repeatBlock_regsBlock_27_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_27_reg3_wack;
    when "1110000" => 
      -- repeatBlock_regsBlock_28_reg1
      repeatBlock_regsBlock_28_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_28_reg1_wack;
    when "1110001" => 
      -- repeatBlock_regsBlock_28_reg2
      repeatBlock_regsBlock_28_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_28_reg2_wack;
    when "1110010" => 
      -- repeatBlock_regsBlock_28_reg3
      repeatBlock_regsBlock_28_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_28_reg3_wack;
    when "1110100" => 
      -- repeatBlock_regsBlock_29_reg1
      repeatBlock_regsBlock_29_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_29_reg1_wack;
    when "1110101" => 
      -- repeatBlock_regsBlock_29_reg2
      repeatBlock_regsBlock_29_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_29_reg2_wack;
    when "1110110" => 
      -- repeatBlock_regsBlock_29_reg3
      repeatBlock_regsBlock_29_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_29_reg3_wack;
    when "1111000" => 
      -- repeatBlock_regsBlock_30_reg1
      repeatBlock_regsBlock_30_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_30_reg1_wack;
    when "1111001" => 
      -- repeatBlock_regsBlock_30_reg2
      repeatBlock_regsBlock_30_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_30_reg2_wack;
    when "1111010" => 
      -- repeatBlock_regsBlock_30_reg3
      repeatBlock_regsBlock_30_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_30_reg3_wack;
    when "1111100" => 
      -- repeatBlock_regsBlock_31_reg1
      repeatBlock_regsBlock_31_reg1_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_31_reg1_wack;
    when "1111101" => 
      -- repeatBlock_regsBlock_31_reg2
      repeatBlock_regsBlock_31_reg2_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_31_reg2_wack;
    when "1111110" => 
      -- repeatBlock_regsBlock_31_reg3
      repeatBlock_regsBlock_31_reg3_wreq <= wr_req_d0;
      wr_ack_int <= repeatBlock_regsBlock_31_reg3_wack;
    when others =>
      wr_ack_int <= wr_req_d0;
    end case;
  end process;

  -- Process for read requests.
  process (araddr, rd_req, repeatBlock_regsBlock_0_reg1_reg, repeatBlock_regsBlock_0_reg2_reg, repeatBlock_regsBlock_0_reg3_reg, repeatBlock_regsBlock_1_reg1_reg, repeatBlock_regsBlock_1_reg2_reg, repeatBlock_regsBlock_1_reg3_reg, repeatBlock_regsBlock_2_reg1_reg, repeatBlock_regsBlock_2_reg2_reg, repeatBlock_regsBlock_2_reg3_reg, repeatBlock_regsBlock_3_reg1_reg, repeatBlock_regsBlock_3_reg2_reg, repeatBlock_regsBlock_3_reg3_reg, repeatBlock_regsBlock_4_reg1_reg, repeatBlock_regsBlock_4_reg2_reg, repeatBlock_regsBlock_4_reg3_reg, repeatBlock_regsBlock_5_reg1_reg, repeatBlock_regsBlock_5_reg2_reg, repeatBlock_regsBlock_5_reg3_reg, repeatBlock_regsBlock_6_reg1_reg, repeatBlock_regsBlock_6_reg2_reg, repeatBlock_regsBlock_6_reg3_reg, repeatBlock_regsBlock_7_reg1_reg, repeatBlock_regsBlock_7_reg2_reg, repeatBlock_regsBlock_7_reg3_reg, repeatBlock_regsBlock_8_reg1_reg, repeatBlock_regsBlock_8_reg2_reg, repeatBlock_regsBlock_8_reg3_reg, repeatBlock_regsBlock_9_reg1_reg, repeatBlock_regsBlock_9_reg2_reg, repeatBlock_regsBlock_9_reg3_reg, repeatBlock_regsBlock_10_reg1_reg, repeatBlock_regsBlock_10_reg2_reg, repeatBlock_regsBlock_10_reg3_reg, repeatBlock_regsBlock_11_reg1_reg, repeatBlock_regsBlock_11_reg2_reg, repeatBlock_regsBlock_11_reg3_reg, repeatBlock_regsBlock_12_reg1_reg, repeatBlock_regsBlock_12_reg2_reg, repeatBlock_regsBlock_12_reg3_reg, repeatBlock_regsBlock_13_reg1_reg, repeatBlock_regsBlock_13_reg2_reg, repeatBlock_regsBlock_13_reg3_reg, repeatBlock_regsBlock_14_reg1_reg, repeatBlock_regsBlock_14_reg2_reg, repeatBlock_regsBlock_14_reg3_reg, repeatBlock_regsBlock_15_reg1_reg, repeatBlock_regsBlock_15_reg2_reg, repeatBlock_regsBlock_15_reg3_reg, repeatBlock_regsBlock_16_reg1_reg, repeatBlock_regsBlock_16_reg2_reg, repeatBlock_regsBlock_16_reg3_reg, repeatBlock_regsBlock_17_reg1_reg, repeatBlock_regsBlock_17_reg2_reg, repeatBlock_regsBlock_17_reg3_reg, repeatBlock_regsBlock_18_reg1_reg, repeatBlock_regsBlock_18_reg2_reg, repeatBlock_regsBlock_18_reg3_reg, repeatBlock_regsBlock_19_reg1_reg, repeatBlock_regsBlock_19_reg2_reg, repeatBlock_regsBlock_19_reg3_reg, repeatBlock_regsBlock_20_reg1_reg, repeatBlock_regsBlock_20_reg2_reg, repeatBlock_regsBlock_20_reg3_reg, repeatBlock_regsBlock_21_reg1_reg, repeatBlock_regsBlock_21_reg2_reg, repeatBlock_regsBlock_21_reg3_reg, repeatBlock_regsBlock_22_reg1_reg, repeatBlock_regsBlock_22_reg2_reg, repeatBlock_regsBlock_22_reg3_reg, repeatBlock_regsBlock_23_reg1_reg, repeatBlock_regsBlock_23_reg2_reg, repeatBlock_regsBlock_23_reg3_reg, repeatBlock_regsBlock_24_reg1_reg, repeatBlock_regsBlock_24_reg2_reg, repeatBlock_regsBlock_24_reg3_reg, repeatBlock_regsBlock_25_reg1_reg, repeatBlock_regsBlock_25_reg2_reg, repeatBlock_regsBlock_25_reg3_reg, repeatBlock_regsBlock_26_reg1_reg, repeatBlock_regsBlock_26_reg2_reg, repeatBlock_regsBlock_26_reg3_reg, repeatBlock_regsBlock_27_reg1_reg, repeatBlock_regsBlock_27_reg2_reg, repeatBlock_regsBlock_27_reg3_reg, repeatBlock_regsBlock_28_reg1_reg, repeatBlock_regsBlock_28_reg2_reg, repeatBlock_regsBlock_28_reg3_reg, repeatBlock_regsBlock_29_reg1_reg, repeatBlock_regsBlock_29_reg2_reg, repeatBlock_regsBlock_29_reg3_reg, repeatBlock_regsBlock_30_reg1_reg, repeatBlock_regsBlock_30_reg2_reg, repeatBlock_regsBlock_30_reg3_reg, repeatBlock_regsBlock_31_reg1_reg, repeatBlock_regsBlock_31_reg2_reg, repeatBlock_regsBlock_31_reg3_reg) begin
    -- By default ack read requests
    rd_dat_d0 <= (others => 'X');
    case araddr(8 downto 2) is
    when "0000000" => 
      -- repeatBlock_regsBlock_0_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_0_reg1_reg;
    when "0000001" => 
      -- repeatBlock_regsBlock_0_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_0_reg2_reg;
    when "0000010" => 
      -- repeatBlock_regsBlock_0_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_0_reg3_reg;
    when "0000100" => 
      -- repeatBlock_regsBlock_1_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_1_reg1_reg;
    when "0000101" => 
      -- repeatBlock_regsBlock_1_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_1_reg2_reg;
    when "0000110" => 
      -- repeatBlock_regsBlock_1_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_1_reg3_reg;
    when "0001000" => 
      -- repeatBlock_regsBlock_2_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_2_reg1_reg;
    when "0001001" => 
      -- repeatBlock_regsBlock_2_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_2_reg2_reg;
    when "0001010" => 
      -- repeatBlock_regsBlock_2_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_2_reg3_reg;
    when "0001100" => 
      -- repeatBlock_regsBlock_3_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_3_reg1_reg;
    when "0001101" => 
      -- repeatBlock_regsBlock_3_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_3_reg2_reg;
    when "0001110" => 
      -- repeatBlock_regsBlock_3_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_3_reg3_reg;
    when "0010000" => 
      -- repeatBlock_regsBlock_4_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_4_reg1_reg;
    when "0010001" => 
      -- repeatBlock_regsBlock_4_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_4_reg2_reg;
    when "0010010" => 
      -- repeatBlock_regsBlock_4_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_4_reg3_reg;
    when "0010100" => 
      -- repeatBlock_regsBlock_5_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_5_reg1_reg;
    when "0010101" => 
      -- repeatBlock_regsBlock_5_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_5_reg2_reg;
    when "0010110" => 
      -- repeatBlock_regsBlock_5_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_5_reg3_reg;
    when "0011000" => 
      -- repeatBlock_regsBlock_6_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_6_reg1_reg;
    when "0011001" => 
      -- repeatBlock_regsBlock_6_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_6_reg2_reg;
    when "0011010" => 
      -- repeatBlock_regsBlock_6_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_6_reg3_reg;
    when "0011100" => 
      -- repeatBlock_regsBlock_7_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_7_reg1_reg;
    when "0011101" => 
      -- repeatBlock_regsBlock_7_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_7_reg2_reg;
    when "0011110" => 
      -- repeatBlock_regsBlock_7_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_7_reg3_reg;
    when "0100000" => 
      -- repeatBlock_regsBlock_8_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_8_reg1_reg;
    when "0100001" => 
      -- repeatBlock_regsBlock_8_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_8_reg2_reg;
    when "0100010" => 
      -- repeatBlock_regsBlock_8_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_8_reg3_reg;
    when "0100100" => 
      -- repeatBlock_regsBlock_9_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_9_reg1_reg;
    when "0100101" => 
      -- repeatBlock_regsBlock_9_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_9_reg2_reg;
    when "0100110" => 
      -- repeatBlock_regsBlock_9_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_9_reg3_reg;
    when "0101000" => 
      -- repeatBlock_regsBlock_10_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_10_reg1_reg;
    when "0101001" => 
      -- repeatBlock_regsBlock_10_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_10_reg2_reg;
    when "0101010" => 
      -- repeatBlock_regsBlock_10_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_10_reg3_reg;
    when "0101100" => 
      -- repeatBlock_regsBlock_11_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_11_reg1_reg;
    when "0101101" => 
      -- repeatBlock_regsBlock_11_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_11_reg2_reg;
    when "0101110" => 
      -- repeatBlock_regsBlock_11_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_11_reg3_reg;
    when "0110000" => 
      -- repeatBlock_regsBlock_12_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_12_reg1_reg;
    when "0110001" => 
      -- repeatBlock_regsBlock_12_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_12_reg2_reg;
    when "0110010" => 
      -- repeatBlock_regsBlock_12_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_12_reg3_reg;
    when "0110100" => 
      -- repeatBlock_regsBlock_13_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_13_reg1_reg;
    when "0110101" => 
      -- repeatBlock_regsBlock_13_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_13_reg2_reg;
    when "0110110" => 
      -- repeatBlock_regsBlock_13_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_13_reg3_reg;
    when "0111000" => 
      -- repeatBlock_regsBlock_14_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_14_reg1_reg;
    when "0111001" => 
      -- repeatBlock_regsBlock_14_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_14_reg2_reg;
    when "0111010" => 
      -- repeatBlock_regsBlock_14_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_14_reg3_reg;
    when "0111100" => 
      -- repeatBlock_regsBlock_15_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_15_reg1_reg;
    when "0111101" => 
      -- repeatBlock_regsBlock_15_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_15_reg2_reg;
    when "0111110" => 
      -- repeatBlock_regsBlock_15_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_15_reg3_reg;
    when "1000000" => 
      -- repeatBlock_regsBlock_16_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_16_reg1_reg;
    when "1000001" => 
      -- repeatBlock_regsBlock_16_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_16_reg2_reg;
    when "1000010" => 
      -- repeatBlock_regsBlock_16_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_16_reg3_reg;
    when "1000100" => 
      -- repeatBlock_regsBlock_17_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_17_reg1_reg;
    when "1000101" => 
      -- repeatBlock_regsBlock_17_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_17_reg2_reg;
    when "1000110" => 
      -- repeatBlock_regsBlock_17_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_17_reg3_reg;
    when "1001000" => 
      -- repeatBlock_regsBlock_18_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_18_reg1_reg;
    when "1001001" => 
      -- repeatBlock_regsBlock_18_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_18_reg2_reg;
    when "1001010" => 
      -- repeatBlock_regsBlock_18_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_18_reg3_reg;
    when "1001100" => 
      -- repeatBlock_regsBlock_19_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_19_reg1_reg;
    when "1001101" => 
      -- repeatBlock_regsBlock_19_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_19_reg2_reg;
    when "1001110" => 
      -- repeatBlock_regsBlock_19_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_19_reg3_reg;
    when "1010000" => 
      -- repeatBlock_regsBlock_20_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_20_reg1_reg;
    when "1010001" => 
      -- repeatBlock_regsBlock_20_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_20_reg2_reg;
    when "1010010" => 
      -- repeatBlock_regsBlock_20_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_20_reg3_reg;
    when "1010100" => 
      -- repeatBlock_regsBlock_21_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_21_reg1_reg;
    when "1010101" => 
      -- repeatBlock_regsBlock_21_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_21_reg2_reg;
    when "1010110" => 
      -- repeatBlock_regsBlock_21_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_21_reg3_reg;
    when "1011000" => 
      -- repeatBlock_regsBlock_22_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_22_reg1_reg;
    when "1011001" => 
      -- repeatBlock_regsBlock_22_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_22_reg2_reg;
    when "1011010" => 
      -- repeatBlock_regsBlock_22_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_22_reg3_reg;
    when "1011100" => 
      -- repeatBlock_regsBlock_23_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_23_reg1_reg;
    when "1011101" => 
      -- repeatBlock_regsBlock_23_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_23_reg2_reg;
    when "1011110" => 
      -- repeatBlock_regsBlock_23_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_23_reg3_reg;
    when "1100000" => 
      -- repeatBlock_regsBlock_24_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_24_reg1_reg;
    when "1100001" => 
      -- repeatBlock_regsBlock_24_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_24_reg2_reg;
    when "1100010" => 
      -- repeatBlock_regsBlock_24_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_24_reg3_reg;
    when "1100100" => 
      -- repeatBlock_regsBlock_25_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_25_reg1_reg;
    when "1100101" => 
      -- repeatBlock_regsBlock_25_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_25_reg2_reg;
    when "1100110" => 
      -- repeatBlock_regsBlock_25_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_25_reg3_reg;
    when "1101000" => 
      -- repeatBlock_regsBlock_26_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_26_reg1_reg;
    when "1101001" => 
      -- repeatBlock_regsBlock_26_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_26_reg2_reg;
    when "1101010" => 
      -- repeatBlock_regsBlock_26_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_26_reg3_reg;
    when "1101100" => 
      -- repeatBlock_regsBlock_27_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_27_reg1_reg;
    when "1101101" => 
      -- repeatBlock_regsBlock_27_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_27_reg2_reg;
    when "1101110" => 
      -- repeatBlock_regsBlock_27_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_27_reg3_reg;
    when "1110000" => 
      -- repeatBlock_regsBlock_28_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_28_reg1_reg;
    when "1110001" => 
      -- repeatBlock_regsBlock_28_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_28_reg2_reg;
    when "1110010" => 
      -- repeatBlock_regsBlock_28_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_28_reg3_reg;
    when "1110100" => 
      -- repeatBlock_regsBlock_29_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_29_reg1_reg;
    when "1110101" => 
      -- repeatBlock_regsBlock_29_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_29_reg2_reg;
    when "1110110" => 
      -- repeatBlock_regsBlock_29_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_29_reg3_reg;
    when "1111000" => 
      -- repeatBlock_regsBlock_30_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_30_reg1_reg;
    when "1111001" => 
      -- repeatBlock_regsBlock_30_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_30_reg2_reg;
    when "1111010" => 
      -- repeatBlock_regsBlock_30_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_30_reg3_reg;
    when "1111100" => 
      -- repeatBlock_regsBlock_31_reg1
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_31_reg1_reg;
    when "1111101" => 
      -- repeatBlock_regsBlock_31_reg2
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_31_reg2_reg;
    when "1111110" => 
      -- repeatBlock_regsBlock_31_reg3
      rd_ack_d0 <= rd_req;
      rd_dat_d0 <= repeatBlock_regsBlock_31_reg3_reg;
    when others =>
      rd_ack_d0 <= rd_req;
    end case;
  end process;
end syn;
